{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","meals","setMeals","neww","setNeww","useEffect","axios","get","then","res","meal","data","className","onClick","map","key","uuidv4","Provider","value","size","color","style","margin","paddingTop","strMeal","href","strYoutube","strInstructions","toString","split","p","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRAqEeA,MA5Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,oBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,KAeb,OATAC,qBAAU,WACRC,IACGC,IADH,sDAEGC,MAAK,SAACC,GAJe,IAACC,IAKHD,EAAIE,KAAKV,MAAM,GALHC,EAAS,CAACQ,SAQ3C,CAACP,IAGF,yBAAKS,UAAU,OACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,QAAd,6BACA,4BAAQA,UAAU,WAAWC,QAhBf,kBAAMT,GAASD,KAgB7B,iBAIA,4BACGF,EAAMa,KAAI,SAACJ,GACV,OACE,wBAAIK,IAAKC,eACP,kBAAC,IAAYC,SAAb,CACEC,MAAO,CACLC,KAAM,OACNC,MAAO,MACPC,MAAO,CAAEC,OAAQ,mBAAmBC,WAAW,UAGjD,4BACGb,EAAKc,QACN,uBAAGC,KAAMf,EAAKgB,YACZ,kBAAC,IAAD,SAIN,6BACChB,EAAKiB,gBACHC,WACAC,MAAM,MACNf,KAAI,SAACgB,EAAGC,GAAJ,OACH,uBAAGhB,IAAKgB,GAAID,YAO1B,gCACE,uBAAGL,KAAK,4BAAR,mCCnDYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.22386726.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"axios\";\r\n\r\nimport { IconContext } from \"react-icons\";\r\nimport { FaYoutube } from \"react-icons/fa\";\r\n\r\nfunction App() {\r\n  const [meals, setMeals] = useState([]);\r\n  const [neww, setNeww] = useState(true);\r\n  const newwHandler = () => setNeww(!neww);\r\n\r\n  const mealEffectHandler = (meal) => setMeals([meal]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://www.themealdb.com/api/json/v1/1/random.php`)\r\n      .then((res) => {\r\n        mealEffectHandler(res.data.meals[0]);\r\n        // console.log(res.data.meals[0])\r\n      });\r\n  }, [neww]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main\">\r\n        <h1 className=\"head\">Agnibesh's Random Recipe?</h1>\r\n        <button className=\"loadmeal\" onClick={newwHandler}>\r\n          Load new Meal\r\n        </button>\r\n        {/* RECIPE */}\r\n        <ul>\r\n          {meals.map((meal) => {\r\n            return (\r\n              <li key={uuidv4()}>\r\n                <IconContext.Provider\r\n                  value={{\r\n                    size: \"2rem\",\r\n                    color: \"red\",\r\n                    style: { margin: \"0rem 1.5rem 0rem\",paddingTop:\"1rem\" },\r\n                  }}\r\n                >\r\n                  <h1>\r\n                    {meal.strMeal}\r\n                    <a href={meal.strYoutube}>\r\n                      <FaYoutube />\r\n                    </a>\r\n                  </h1>\r\n                </IconContext.Provider>\r\n                <hr />\r\n                {meal.strInstructions\r\n                  .toString()\r\n                  .split(\"\\n\")\r\n                  .map((p, i) => (\r\n                    <p key={i}>{p}</p>\r\n                  ))}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n      <footer>\r\n        <a href=\"https://www.agnibesh.dev\">Â© Agnibesh Mukherjee 2020</a>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}